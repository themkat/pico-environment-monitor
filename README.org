[[https://github.com/themkat/pico-environment-monitor/actions/workflows/build-and-test.yml][file:https://github.com/themkat/pico-environment-monitor/actions/workflows/build-and-test.yml/badge.svg]]
* Pico Environment Monitor



TODO: both a prometheus endpoint and a json one? Json is easier to parse in browsers and similar. (also if I make a smartwatch app?)


polyfill for Python3 UnitTest:
https://github.com/mytechnotalent/CircuitPython_Unittest


** Project goals
I had a few goals with this project:
- Have a basic monitor with temperature, humidity, CO2 etc. where data could easily be read by other devices on my network
- Experiment with TDD on embedded platforms.
- Build good habits for TDDing CircuitPython projects for later.
- Data exported over the network. Easily used by Prometheus to populate a Grafana dashboard, and also have a JSON (or similar) endpoint that could be used by other devices.
  

** Directory structure

- root contains readme, scripts and other common things
- *code*: contains the CircuitPython code as well as unit tests

  
** Local development dependencies
asddisfnsdf


** On board development
# TODO: mention the primitive test main script and how I run it
# cp ... code.py


# TODO: mention that this is based on what I have done so far. Could probably be automated with scripts for bigger projects

[[./rpi_pico_envmonitor_sketch.png]]
(the picture is of a regular Pico with headers, as I couldn't find a Pico W Fritzing part. Just imagine that it is the Pico W. They are pin compatible after all. Also the BME680 is pin compatible with the BME688 which I used, and they also use the same libraries)

# TODO: mention circup for installing dependencies. takes up less space than the pre-installed zip files with tons of shit
*** Unit tests
# TODO. what files need to be uploaded.
While working on the unit tests, I really just copied over the related files and the tests (including the testmain =test_main.py=). This is automated in the script called =deploy_test.sh=, with the path to the CircuitPython volume as input (e.g, =/Volumes/CIRCUITPY= on my Mac). 

# TODO: the polyfill that is needed to make unittests work good on device

*** Running the main program
# TODO: circup for handling the device specific dependencies. Should this be mentioned before Unit testing?
# TODO: the files needed to be uploaded

# TODO: settings.toml
